{"id":"asmP","dependencies":[{"name":"/home/stpl/Desktop/Abhishak/Bot/arena_bot/praktice.ai/Chatroom/node_modules/state-toggle/package.json","includedInParent":true,"mtime":1548998423311},{"name":"/home/stpl/Desktop/Abhishak/Bot/arena_bot/praktice.ai/Chatroom/package.json","includedInParent":true,"mtime":1540187635000},{"name":"/home/stpl/Desktop/Abhishak/Bot/arena_bot/praktice.ai/Chatroom/.babelrc","includedInParent":true,"mtime":1540187635000}],"generated":{"js":"\"use strict\";function t(t,n,r){return function(){var u=r||this,e=u[t];return u[t]=!n,function(){u[t]=e}}}module.exports=t;","map":{"mappings":[{"source":"../node_modules/state-toggle/index.js","original":{"line":9,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/state-toggle/index.js","original":{"line":26,"column":0},"generated":{"line":1,"column":13}},{"source":"../node_modules/state-toggle/index.js","original":{"line":26,"column":0},"generated":{"line":1,"column":22}},{"source":"../node_modules/state-toggle/index.js","original":{"line":26,"column":0},"generated":{"line":1,"column":24}},{"source":"../node_modules/state-toggle/index.js","original":{"line":26,"column":0},"generated":{"line":1,"column":26}},{"source":"../node_modules/state-toggle/index.js","original":{"line":26,"column":0},"generated":{"line":1,"column":28}},{"source":"../node_modules/state-toggle/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":31}},{"source":"../node_modules/state-toggle/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":38}},{"source":"../node_modules/state-toggle/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":49}},{"source":"../node_modules/state-toggle/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":53}},{"source":"../node_modules/state-toggle/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":55}},{"source":"../node_modules/state-toggle/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":58}},{"source":"../node_modules/state-toggle/index.js","original":{"line":34,"column":0},"generated":{"line":1,"column":63}},{"source":"../node_modules/state-toggle/index.js","original":{"line":34,"column":0},"generated":{"line":1,"column":65}},{"source":"../node_modules/state-toggle/index.js","original":{"line":34,"column":0},"generated":{"line":1,"column":67}},{"source":"../node_modules/state-toggle/index.js","original":{"line":41,"column":0},"generated":{"line":1,"column":70}},{"source":"../node_modules/state-toggle/index.js","original":{"line":36,"column":0},"generated":{"line":1,"column":77}},{"source":"../node_modules/state-toggle/index.js","original":{"line":36,"column":0},"generated":{"line":1,"column":79}},{"source":"../node_modules/state-toggle/index.js","original":{"line":36,"column":0},"generated":{"line":1,"column":83}},{"source":"../node_modules/state-toggle/index.js","original":{"line":41,"column":0},"generated":{"line":1,"column":85}},{"source":"../node_modules/state-toggle/index.js","original":{"line":42,"column":0},"generated":{"line":1,"column":96}},{"source":"../node_modules/state-toggle/index.js","original":{"line":42,"column":0},"generated":{"line":1,"column":98}},{"source":"../node_modules/state-toggle/index.js","original":{"line":42,"column":0},"generated":{"line":1,"column":101}},{"source":"../node_modules/state-toggle/index.js","original":{"line":14,"column":0},"generated":{"line":1,"column":105}},{"source":"../node_modules/state-toggle/index.js","original":{"line":14,"column":0},"generated":{"line":1,"column":112}},{"source":"../node_modules/state-toggle/index.js","original":{"line":14,"column":0},"generated":{"line":1,"column":120}}],"sources":{"../node_modules/state-toggle/index.js":"/**\n * @author Titus Wormer\n * @copyright 2016 Titus Wormer\n * @license MIT\n * @module state-toggle\n * @fileoverview Enter/exit a state.\n */\n\n'use strict';\n\n/* eslint-env commonjs */\n\n/* Expose. */\nmodule.exports = factory;\n\n/**\n * Construct a state `toggler`: a function which inverses\n * `property` in context based on its current value.\n * The by `toggler` returned function restores that value.\n *\n * @param {string} key - Property to toggle.\n * @param {boolean} state - Default state.\n * @param {Object?} [ctx] - Context object.\n * @return {Function} - Enter.\n */\nfunction factory(key, state, ctx) {\n  /**\n   * Enter a state.\n   *\n   * @return {Function} - Exit state.\n   */\n  return function () {\n    var context = ctx || this;\n    var current = context[key];\n\n    context[key] = !state;\n\n    /**\n     * Cancel state to its value before entering.\n     */\n    return function () {\n      context[key] = current;\n    };\n  };\n}\n"},"lineCount":null}},"hash":"61d482b835e2966aa983a2c436423d5f","cacheData":{"env":{}}}